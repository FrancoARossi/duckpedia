// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  claim         Claim?
  profileName   String?   @unique
  shames        Shame[]   @relation("ShamedUser")
  shamedBy      Shame[]   @relation("ShamedByUser")
}

model Claim {
  id          String    @id @default(cuid())
  claimedAt   DateTime? @default(now())
  claimedBy   User?     @relation(fields: [claimedById], references: [id])
  hat         Hat       @relation(fields: [hatId], references: [id])
  claimedById String?   @unique
  hatId       String    @unique

  @@unique([claimedById, hatId])
}

model Hat {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  name       String
  imageUrl   String
  note       String?
  unlockable Boolean  @default(false)
  claim      Claim?
}

model Shame {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  shamedById String
  note       String?
  user       User     @relation("ShamedUser", fields: [userId], references: [id], onDelete: Cascade)
  shamedBy   User     @relation("ShamedByUser", fields: [shamedById], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([shamedById])
}
